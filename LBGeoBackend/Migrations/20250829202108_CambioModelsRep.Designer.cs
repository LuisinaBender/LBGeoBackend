// <auto-generated />
using System;
using LBGeoBackend.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LBGeoBackend.Migrations
{
    [DbContext(typeof(LBGeoDbContext))]
    [Migration("20250829202108_CambioModelsRep")]
    partial class CambioModelsRep
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("LBGeoBackend.Models.Clientes", b =>
                {
                    b.Property<int>("id_cliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id_cliente"));

                    b.Property<bool>("Eliminado")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("apellido")
                        .HasColumnType("longtext");

                    b.Property<string>("direccion")
                        .HasColumnType("longtext");

                    b.Property<string>("email")
                        .HasColumnType("longtext");

                    b.Property<string>("nombre")
                        .HasColumnType("longtext");

                    b.Property<int?>("nro_documento")
                        .HasColumnType("int");

                    b.Property<string>("telefono")
                        .HasColumnType("longtext");

                    b.HasKey("id_cliente");

                    b.ToTable("Clientes");

                    b.HasData(
                        new
                        {
                            id_cliente = 1,
                            Eliminado = false,
                            apellido = "Pérez",
                            direccion = "Calle Falsa 123",
                            email = "juan@example.com",
                            nombre = "Juan",
                            nro_documento = 12345678,
                            telefono = "3415551234"
                        },
                        new
                        {
                            id_cliente = 2,
                            Eliminado = false,
                            apellido = "Gómez",
                            direccion = "Av. Libertad 456",
                            email = "maria@example.com",
                            nombre = "María",
                            nro_documento = 87654321,
                            telefono = "3415555678"
                        });
                });

            modelBuilder.Entity("LBGeoBackend.Models.Equivalencias", b =>
                {
                    b.Property<int>("id_equivalencia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id_equivalencia"));

                    b.Property<bool>("Eliminado")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("codigo_OEM_equivalente")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("codigo_OEM_original")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id_equivalencia");

                    b.ToTable("Equivalencias");

                    b.HasData(
                        new
                        {
                            id_equivalencia = 1,
                            Eliminado = false,
                            codigo_OEM_equivalente = "EQ-001",
                            codigo_OEM_original = "OR-100"
                        },
                        new
                        {
                            id_equivalencia = 2,
                            Eliminado = false,
                            codigo_OEM_equivalente = "EQ-002",
                            codigo_OEM_original = "OR-200"
                        });
                });

            modelBuilder.Entity("LBGeoBackend.Models.Proveedores", b =>
                {
                    b.Property<int>("id_proveedor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id_proveedor"));

                    b.Property<bool>("Eliminado")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("direccion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("email")
                        .HasColumnType("longtext");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("telefono")
                        .HasColumnType("longtext");

                    b.HasKey("id_proveedor");

                    b.ToTable("Proveedores");

                    b.HasData(
                        new
                        {
                            id_proveedor = 1,
                            Eliminado = false,
                            direccion = "San Martín 234",
                            email = "ventas@rosario.com",
                            nombre = "Repuestos Rosario",
                            telefono = "3414440000"
                        },
                        new
                        {
                            id_proveedor = 2,
                            Eliminado = false,
                            direccion = "Bv. Oroño 789",
                            email = "contacto@santafe.com",
                            nombre = "AutoPartes Santa Fe",
                            telefono = "3414441111"
                        });
                });

            modelBuilder.Entity("LBGeoBackend.Models.Registros", b =>
                {
                    b.Property<int>("id_registro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id_registro"));

                    b.Property<bool>("Eliminado")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("cantidad")
                        .HasColumnType("int");

                    b.Property<int>("id_registro_venta")
                        .HasColumnType("int");

                    b.Property<int>("id_repuesto")
                        .HasColumnType("int");

                    b.Property<decimal>("precio_total")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("precio_unitario")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("id_registro");

                    b.HasIndex("id_registro_venta");

                    b.HasIndex("id_repuesto");

                    b.ToTable("Registros");

                    b.HasData(
                        new
                        {
                            id_registro = 1,
                            Eliminado = false,
                            cantidad = 2,
                            id_registro_venta = 1,
                            id_repuesto = 1,
                            precio_total = 30000m,
                            precio_unitario = 15000m
                        },
                        new
                        {
                            id_registro = 2,
                            Eliminado = false,
                            cantidad = 1,
                            id_registro_venta = 2,
                            id_repuesto = 2,
                            precio_total = 12000m,
                            precio_unitario = 12000m
                        });
                });

            modelBuilder.Entity("LBGeoBackend.Models.RegistrosVentas", b =>
                {
                    b.Property<int>("id_registro_venta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id_registro_venta"));

                    b.Property<bool>("Eliminado")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("cantidad")
                        .HasColumnType("int");

                    b.Property<DateTime>("fecha_venta")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("id_cliente")
                        .HasColumnType("int");

                    b.Property<int>("id_repuesto")
                        .HasColumnType("int");

                    b.Property<decimal>("precio_total")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("precio_unitario")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("id_registro_venta");

                    b.HasIndex("id_cliente");

                    b.HasIndex("id_repuesto");

                    b.ToTable("RegistrosVentas");

                    b.HasData(
                        new
                        {
                            id_registro_venta = 1,
                            Eliminado = false,
                            cantidad = 2,
                            fecha_venta = new DateTime(2025, 8, 29, 17, 21, 6, 618, DateTimeKind.Local).AddTicks(8235),
                            id_cliente = 1,
                            id_repuesto = 1,
                            precio_total = 30000m,
                            precio_unitario = 15000m
                        },
                        new
                        {
                            id_registro_venta = 2,
                            Eliminado = false,
                            cantidad = 1,
                            fecha_venta = new DateTime(2025, 8, 29, 17, 21, 6, 618, DateTimeKind.Local).AddTicks(8238),
                            id_cliente = 2,
                            id_repuesto = 2,
                            precio_total = 12000m,
                            precio_unitario = 12000m
                        });
                });

            modelBuilder.Entity("LBGeoBackend.Models.Repuestos", b =>
                {
                    b.Property<int>("id_repuesto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id_repuesto"));

                    b.Property<bool>("Eliminado")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("anio")
                        .HasColumnType("int");

                    b.Property<string>("codigo_OEM_original")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("id_equivalencia")
                        .HasColumnType("int");

                    b.Property<int>("id_proveedor")
                        .HasColumnType("int");

                    b.Property<string>("imagen_url")
                        .HasColumnType("longtext");

                    b.Property<string>("marca_OEM")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("marca_auto")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("modelo_auto")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("motor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("precio")
                        .HasColumnType("int");

                    b.Property<string>("texto")
                        .HasColumnType("longtext");

                    b.HasKey("id_repuesto");

                    b.HasIndex("id_equivalencia");

                    b.HasIndex("id_proveedor");

                    b.ToTable("Repuestos");

                    b.HasData(
                        new
                        {
                            id_repuesto = 1,
                            Eliminado = false,
                            anio = 2020,
                            codigo_OEM_original = "OR-100",
                            id_equivalencia = 1,
                            id_proveedor = 1,
                            imagen_url = "https://http2.mlstatic.com/D_NQ_NP_616775-MLA76602933995_052024-O.webp",
                            marca_OEM = "Toyota",
                            marca_auto = "Toyota",
                            modelo_auto = "Corolla",
                            motor = "1.8L",
                            precio = 15000,
                            texto = "Filtro de aire original para Toyota Corolla"
                        },
                        new
                        {
                            id_repuesto = 2,
                            Eliminado = false,
                            anio = 2019,
                            codigo_OEM_original = "OR-200",
                            id_equivalencia = 2,
                            id_proveedor = 2,
                            imagen_url = "https://http2.mlstatic.com/D_NQ_NP_836797-MLA80954735198_122024-O.webp",
                            marca_OEM = "Ford",
                            marca_auto = "Ford",
                            modelo_auto = "Fiesta",
                            motor = "1.6L",
                            precio = 12000,
                            texto = "Pastillas de freno originales para Ford Fiesta"
                        });
                });

            modelBuilder.Entity("LBGeoBackend.Models.Usuarios", b =>
                {
                    b.Property<int>("id_usuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id_usuario"));

                    b.Property<bool>("Eliminado")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Rol")
                        .HasColumnType("longtext");

                    b.Property<string>("apellido")
                        .HasColumnType("longtext");

                    b.Property<string>("email")
                        .HasColumnType("longtext");

                    b.Property<string>("nombre")
                        .HasColumnType("longtext");

                    b.HasKey("id_usuario");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            id_usuario = 1,
                            Eliminado = false,
                            Rol = "Administrador",
                            apellido = "Principal",
                            email = "admin@lbgeo.com",
                            nombre = "Admin"
                        },
                        new
                        {
                            id_usuario = 2,
                            Eliminado = false,
                            Rol = "Vendedor",
                            apellido = "Ventas",
                            email = "ventas@lbgeo.com",
                            nombre = "Empleado"
                        });
                });

            modelBuilder.Entity("LBGeoBackend.Models.Registros", b =>
                {
                    b.HasOne("LBGeoBackend.Models.RegistrosVentas", "RegistroVenta")
                        .WithMany("Registros")
                        .HasForeignKey("id_registro_venta")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LBGeoBackend.Models.Repuestos", "Repuesto")
                        .WithMany("Registros")
                        .HasForeignKey("id_repuesto")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RegistroVenta");

                    b.Navigation("Repuesto");
                });

            modelBuilder.Entity("LBGeoBackend.Models.RegistrosVentas", b =>
                {
                    b.HasOne("LBGeoBackend.Models.Clientes", "Cliente")
                        .WithMany("Ventas")
                        .HasForeignKey("id_cliente")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LBGeoBackend.Models.Repuestos", "Repuesto")
                        .WithMany("Ventas")
                        .HasForeignKey("id_repuesto")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Repuesto");
                });

            modelBuilder.Entity("LBGeoBackend.Models.Repuestos", b =>
                {
                    b.HasOne("LBGeoBackend.Models.Equivalencias", "Equivalencia")
                        .WithMany("Repuestos")
                        .HasForeignKey("id_equivalencia")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LBGeoBackend.Models.Proveedores", "Proveedor")
                        .WithMany("Repuestos")
                        .HasForeignKey("id_proveedor")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Equivalencia");

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("LBGeoBackend.Models.Clientes", b =>
                {
                    b.Navigation("Ventas");
                });

            modelBuilder.Entity("LBGeoBackend.Models.Equivalencias", b =>
                {
                    b.Navigation("Repuestos");
                });

            modelBuilder.Entity("LBGeoBackend.Models.Proveedores", b =>
                {
                    b.Navigation("Repuestos");
                });

            modelBuilder.Entity("LBGeoBackend.Models.RegistrosVentas", b =>
                {
                    b.Navigation("Registros");
                });

            modelBuilder.Entity("LBGeoBackend.Models.Repuestos", b =>
                {
                    b.Navigation("Registros");

                    b.Navigation("Ventas");
                });
#pragma warning restore 612, 618
        }
    }
}
